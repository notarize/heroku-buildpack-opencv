#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# parse params
build_dir=$1
cache_dir=$2
env_dir=$3

opencv_version="2.4.13"
pack=$(dirname $0)
if [ ! "${pack:0:1}" == "/" ]
then
  base=$(pwd)
  pack="${base}/${pack}"
fi
opencv_path="${pack}/../vendor/opencv-linux-amd64-${opencv_version}.tar.gz"

vendored_opencv="/app/vendor/opencv"
cached_opencv="$cache_dir/opencv"

if [ -d "$OPENCV_CACHE" ]; then
  echo "-----> Reusing cached OpenCV"
  cp -a $cached_opencv $vendored_opencv
else
  echo "-----> Copying and extracting OpenCV"
  echo "Extracting [$opencv_path] to [$VENDORED_OPENCV]"
  mkdir -p $vendored_opencv
  tar xzf ${opencv_path} -C $vendored_opencv

  mkdir -p $cache_dir # in case it doesn't exist yet
  cp -a $vendored_opencv $cached_opencv
fi

# vendor
echo "-----> Vendoring OpenCV shared objects into slug"
vendored_slug="$BUILD_DIR/vendor/opencv"
mkdir -p $vendored_slug
cp -a "$vendored_opencv/." $vendored_slug

# LD_LIBRARY_PATH=${target}/lib:$LD_LIBRARY_PATH

# BUNDLE_ is the env prefix for bundler configs
# see https://bundler.io/v1.16/bundle_config.html for more
opencv_env=${env_dir}/BUNDLE_BUILD__RUBY-OPENCV
if [ ! -f ${opencv_env} ]; then
    echo "--with-opencv-dir=${VENDORED_SO}/" > ${opencv_env}
fi

# echo "export PATH=\"$VENODRED_SO/bin:$PATH\"" > $BUILD_DIR/export
# echo "export LD_LIBRARY_PATH=\"$VENODRED_SO/lib:$LD_LIBRARY_PATH\"" >> $BUILD_DIR/export

# runtime
mkdir -p "$build_dir/.profile.d"
echo "export LD_LIBRARY_PATH=\"$VENDORED_SO/lib:$LD_LIBRARY_PATH\"" > $build_dir/.profile.d/opencv.sh
# echo "export LD_LIBRARY_PATH=\"/app/vendor/opencv/lib:\$LD_LIBRARY_PATH\"" > $BUILD_DIR/.profile.d/opencv.sh

echo "*** OpenCV installation finished ***"
